"""
Bhoma-specific utility methods for cases.  TODO: abstract / move this somewhere more
appropriate. 
"""

from datetime import datetime, time, timedelta
from bhoma.apps.case import const
from bhoma.apps.case.models import CCase
from bhoma.utils import parsing
from bhoma.apps.case.models import CCaseAction, CReferral
from bhoma.apps.patient.models import CPatient
from couchdbkit.schema.properties_proxy import SchemaProperty
from bhoma.utils.couch import uid

def get_or_update_bhoma_cases(xformdoc, encounter):
    """
    Process Bhoma XML - which looks like this:
        <case>
            <patient_id></patient_id> <!-- patient -->
            <case_type></case_type> <!-- diagnosis -->
            <followup_type></followup_type> <!-- referral, chw followup, facility followup, closed -->
            <followup_date></followup_date> <!-- generated by form or empty (in days) -->
            <outcome></outcome> <!-- how the case was closed -->
        </case>
    """
    case_block = xformdoc[const.CASE_TAG] if const.CASE_TAG in xformdoc else None
    if case_block:
        # {u'case_type': u'diarrhea', u'followup_type': u'followup-chw', u'followup_date': u'7', u'patient_id': u'5a105a68b050d0149eb1d23fa75d3175'}
        # create case
        followup_type = case_block[const.FOLLOWUP_TYPE_TAG]
        if const.FOLLOWUP_TYPE_REFER == followup_type:
            return _new_referral(case_block, xformdoc, encounter)
        if const.FOLLOWUP_TYPE_FOLLOW_CHW == followup_type:
            return _new_chw_follow(case_block, xformdoc, encounter)
        if const.FOLLOWUP_TYPE_FOLLOW_CLINIC == followup_type:
            return _new_clinic_follow(case_block, xformdoc, encounter)
        if const.FOLLOWUP_TYPE_CLOSE == followup_type:
            return _new_closed_case(case_block, xformdoc, encounter)
        raise Exception("Unknown followup type: %s" % followup_type)
    return None

def _set_common_attrs(case_block, xformdoc, encounter):
    """
    Shared case attributes.
    """
    case_id = uid.new()
    opened_on = datetime.combine(encounter.visit_date, time())
    type = case_block[const.CASE_TAG_TYPE]
    outcome = case_block[const.OUTCOME_TAG]
    patient_id = case_block[const.PATIENT_ID_TAG]
    # these are somewhat arbitraty
    name = "%s|%s" % (encounter.type, type)
    # the xform id goes in the external_id field and the encounter_id
    # gets its own field
    external_id = xformdoc["_id"]
    encounter_id = encounter.get_id
    if encounter.metadata:
        user_id = encounter.metadata.user_id
        modified_on = encounter.metadata.time_end
    else:
        user_id = None
        modified_on = datetime.now()
    
    # create two simultaneous actions, the open and the close
    create_action = CCaseAction(type=const.CASE_ACTION_CREATE, opened_on=opened_on)
    
    case = CCase(case_id=case_id, opened_on=opened_on, modified_on=modified_on, 
                 type=type, name=name, user_id=user_id, external_id=external_id, 
                 encounter_id=encounter_id, actions=[create_action,])
    # custom bhoma properties 
    case.patient_id = patient_id
    case.outcome = outcome
    return case

def _set_referral_attrs(case, case_block):
    ref_id = uid.new()
    type = "%s|%s" % (case.name, case_block[const.FOLLOWUP_TYPE_TAG])
    ref = CReferral(referral_id=ref_id, type=type, opened_on=case.opened_on, 
                    modified_on=case.modified_on, closed=False)
    return ref
    
def _new_referral(case_block, xformdoc, encounter):
    case = _set_common_attrs(case_block, xformdoc, encounter)
    # TODO: add the referral 
    return case

def _new_chw_follow(case_block, xformdoc, encounter):
    case = _set_common_attrs(case_block, xformdoc, encounter)
    ref = _set_referral_attrs(case, case_block)
    follow_days = int(case_block[const.FOLLOWUP_DATE_TAG])
    ref.follow_date = case.opened_on + timedelta(days=follow_days)
    case.referrals = [ref,]
    return case

def _new_clinic_follow(case_block, xformdoc, encounter):
    case = _set_common_attrs(case_block, xformdoc, encounter)
    ref = _set_referral_attrs(case, case_block)
    follow_days = int(case_block[const.FOLLOWUP_DATE_TAG])
    ref.follow_date = case.opened_on + timedelta(days=follow_days)
    case.referrals = [ref,]
    return case

def _new_closed_case(case_block, xformdoc, encounter):
    """
    Case from closing block
    """
    case = _set_common_attrs(case_block, xformdoc, encounter)
    close_action = CCaseAction(type=const.CASE_ACTION_CLOSE, closed_on=case.opened_on, outcome=case.outcome)
    case.actions.append(close_action)
    case.closed = True
    return case

