"""
Bhoma-specific utility methods for cases.  TODO: abstract / move this somewhere more
appropriate. 
"""

from datetime import datetime, time, timedelta
from bhoma.apps.case import const
from bhoma.apps.case.models import CommCareCase
from bhoma.utils import parsing
from bhoma.apps.case.models import CommCareCaseAction
from bhoma.apps.patient.models import CPatient
from bhoma.utils.couch import uid
from bhoma.apps.case.models.couch import PatientCase
from bhoma.utils.parsing import string_to_datetime
from bhoma.apps.case.bhomacaselogic.shared import *
from bhoma.apps.patient.encounters.config import ENCOUNTERS_BY_XMLNS,\
    HEALTHY_PREGNANCY_NAMESPACE
from bhoma.apps.case.bhomacaselogic.pregnancy.calc import get_pregnancy_outcome
from bhoma.utils.logging import log_exception
from bhoma.apps.case.exceptions import CaseLogicException
from bhoma.utils.dates import safe_date_add 
from bhoma.apps.case.bhomacaselogic.followups import get_followup_type

    
def close_previous_cases(patient, form, encounter):
    """
    From the patient, find any open missed appointment (or pending appointment) 
    cases and close them.
    """
    pregnancy_outcome = get_pregnancy_outcome(form)
    for case in patient.cases:
        if not case.closed and case.opened_on.date() < encounter.visit_date:
            if case.type == const.CASE_TYPE_PREGNANCY:
                # pregnancy cases only get closed if there was a pregnancy outcome
                if pregnancy_outcome:
                    # close_case(case, encounter, pregnancy_outcome)
                    pass
                    
            else:
                close_case(case, encounter, const.Outcome.RETURNED_TO_CLINIC)
    patient.save()
                    
                    

def get_or_update_bhoma_case(xformdoc, encounter):
    """
    Process Bhoma XML - which looks like this:
        <case>
            <patient_id></patient_id> <!-- patient -->
            <case_type></case_type> <!-- diagnosis -->
            <followup_type></followup_type> <!-- referral, facility followup, closed -->
            <followup_date></followup_date> <!-- generated by form or empty (in days) -->
        </case>
    """
    if xformdoc.namespace == HEALTHY_PREGNANCY_NAMESPACE:
        # HACK: pregnancy cases must be dealt with after-the-fact so do nothing here
        return None
    
    followup_type = get_followup_type(xformdoc)
    if followup_type.opens_case():
        case = _get_bhoma_case(xformdoc.xpath(const.CASE_TAG), encounter)
        if followup_type.closes_case():
            # if it closes the case, just mark it as such and attach an outcome
            case.outcome = followup_type.get_outcome()
            case.closed = True
            case.closed_on = case.opened_on
        else:
            case.status = followup_type.get_status()
            if case.send_to_phone:
                # create a commcare case for this to go to the phone
                cccase = get_first_commcare_case(encounter, bhoma_case=case, 
                                                 case_id=get_commcare_case_id_from_block(encounter, case, xformdoc.xpath(const.CASE_TAG)))
                cccase.followup_type = followup_type.get_phone_followup_type()
                cccase.activation_date = followup_type.get_activation_date(case.opened_on)
                cccase.start_date = followup_type.get_start_date(case.opened_on)
                cccase.due_date = followup_type.get_due_date(case.opened_on)
                cccase.missed_appointment_date = followup_type.get_missed_appointment_date(case.opened_on)
                case.commcare_cases = [cccase]
        return case
    else:
        # No case
        if not followup_type.is_valid():
            log_exception(CaseLogicException("Invalid followup type: %s in doc %s" % (followup_type, xformdoc.get_id)))
        return None
    
def _get_bhoma_case(case_block, encounter):
    """
    Shared case attributes.  
    """
    send_followup, send_followup_reason = should_send_followup_to_phone(encounter)
    # todo, remove this after dealing with it
    if const.OUTCOME_TAG in case_block:
        logging.error("Note: removed outcome %s from the case.  Make sure you dealt with this!" % \
                      case_block[const.OUTCOME_TAG])
                       
    return PatientCase(_id=get_bhoma_case_id_from_form(encounter.get_xform()), 
                       opened_on=datetime.combine(encounter.visit_date, time()),
                       modified_on=datetime.utcnow(),
                       type=case_block[const.CASE_TAG_TYPE],
                       encounter_id=encounter.get_id,
                       patient_id=case_block[const.PATIENT_ID_TAG],
                       send_to_phone=send_followup,
                       send_to_phone_reason=send_followup_reason
                       )
    
def get_first_commcare_case(encounter, bhoma_case, case_id):
    name = get_commcare_case_name(encounter, bhoma_case)
    user_id = get_user_id(encounter)
    
    cccase = new_commcare_case(case_id=case_id,
                               name=name,
                               type=bhoma_case.type,
                               opened_on=bhoma_case.opened_on, 
                               bhoma_case_id=bhoma_case._id, 
                               user_id=user_id,
                               modified_on=bhoma_case.modified_on, 
                               encounter_id=bhoma_case.encounter_id)
    return cccase


def _followup_type_from_block(case_block):
    return follow_type_from_form(case_block[const.FOLLOWUP_TYPE_TAG])

